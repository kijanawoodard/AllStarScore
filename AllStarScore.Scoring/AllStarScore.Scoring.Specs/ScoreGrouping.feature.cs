// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AllStarScore.Scoring.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Score Grouping")]
    public partial class ScoreGroupingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ScoreGrouping.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Score Grouping", "In order give Awards based on Divisions and Levels\r\nAs a Tabulator\r\nI want the Te" +
                    "ams to be Grouped by Division and Level", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group performances all in the same division")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void GroupPerformancesAllInTheSameDivision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group performances all in the same division", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "GymName",
                        "IsSmallGym",
                        "Final Score",
                        "Registration Id",
                        "Division Id",
                        "Level Id"});
            table1.AddRow(new string[] {
                        "Tiger Cheer",
                        "true",
                        "40.200",
                        "registrations-1",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "High Spirit",
                        "true",
                        "42.293",
                        "registrations-2",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "Division Winner",
                        "false",
                        "45.933",
                        "registrations-3",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "A Large Gym",
                        "false",
                        "43.397",
                        "registrations-4",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "Another Large Gym",
                        "false",
                        "41.397",
                        "registrations-5",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "A Small Gym",
                        "true",
                        "41.397",
                        "registrations-6",
                        "divisions-1",
                        "levels-1"});
            table1.AddRow(new string[] {
                        "A New Gym",
                        "true",
                        "38.397",
                        "registrations-7",
                        "divisions-1",
                        "levels-1"});
#line 8
 testRunner.Given("a set of Performances:", ((string)(null)), table1);
#line 17
 testRunner.When("Performances are Grouped");
#line 18
 testRunner.Then("the count of divisions-1 will be 7");
#line 19
  testRunner.And("the count of levels-1 will be 7");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
